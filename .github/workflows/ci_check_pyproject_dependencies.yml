name: CI - Check pyproject.toml dependencies

on:
  workflow_call:
    inputs:
      # REQUIRED
      git_username:
        description: "A git username (used to set the 'user.name' config option)."
        required: true
        type: string
      git_email:
        description: "A git user's email address (used to set the 'user.email' config option)."
        required: true
        type: string

      # OPTIONAL
      runner:
        description: "The runner to use for the workflow. Note, the callable workflow expects a Linux/Unix system."
        required: false
        type: string
        default: ubuntu-latest
      target_branch:
        description: "The branch name for the target of the opened PR."
        required: false
        type: string
        default: ""
      permanent_dependencies_branch:  # DEPRECATED - v2.6.0 REMOVAL
        description: "DEPRECATED - use `target_branch` instead. Will be removed in v2.6.0. The branch name for the permanent dependency updates branch."
        required: false
        type: string
        default: ""
      python_version:
        description: "The Python version to use for the workflow."
        required: false
        type: string
        default: "3.9"
      install_extras:
        description: "Any extras to install from the local repository through 'pip'. Must be encapsulated in square parentheses (`[]`) and be separated by commas (`,`) without any spaces. Example: `'[dev,release]'`."
        required: false
        type: string
        default: ""
      system_dependencies:
        description: "A single (space-separated) or multi-line string of Ubuntu APT packages to install prior to installing the local repository."
        required: false
        type: string
        default: ""
      pip_index_url:
        description: "A URL to a PyPI repository index. Defaults to 'https://pypi.org/simple/'."
        required: false
        type: string
        default: "https://pypi.org/simple/"
      pip_extra_index_urls:
        description: "A space-delimited string of URLs to additional PyPI repository indices."
        required: false
        type: string
        default: ""
      pr_body_file:
        description: "Relative path to PR body file from the root of the repository. Example: `'.github/utils/pr_body_deps_check.txt'`."
        required: false
        type: string
        default: ""
      fail_fast:
        description: "Whether the task to update dependencies should fail if any error occurs."
        required: false
        type: boolean
        default: false
      pr_labels:
        description: "A comma separated list of strings of GitHub labels to use for the created PR."
        required: false
        type: string
        default: ""
      ignore:
        description: "Create ignore conditions for certain dependencies. A multi-line string of ignore rules, where each line is an ellipsis-separated (`...`) string of key/value-pairs. One line per dependency. This option is similar to the `ignore` option of Dependabot."
        required: false
        type: string
        default: ""
      branch_name_extension:
        description: "A string to append to the branch name of the created PR. Example: `'-my-branch'`. It will be appended after a forward slash, so the final branch name will be `ci/update-pyproject/-my-branch`."
        required: false
        type: string
        default: ""
      debug:
        description: "Whether to run the workflow in debug mode, printing extra debug information."
        required: false
        type: boolean
        default: false
      skip_unnormalized_python_package_names:
        description: "Whether to skip dependencies with unnormalized Python package names. Normalization is outlined here: https://packaging.python.org/en/latest/specifications/name-normalization. Default is `false`."
        required: false
        type: boolean
        default: false
    secrets:
      PAT:
        description: "A personal access token (PAT) with rights to create PRs. This will fallback on `GITHUB_TOKEN`."
        required: false

jobs:
  check-dependencies:
    name: Check & update dependencies in `pyproject.toml`
    runs-on: ${{ inputs.runner }}

    steps:
    - name: Validate inputs
      id: validate_inputs
      run: |
        if [[ ! "${{ inputs.python_version }}" =~ ^3\.([8-9]|1[0-4])(\..*)?$ ]]; then
          echo "Python version '${{ inputs.python_version }}' is not supported."
          echo "Supported versions are: 3.8, 3.9, 3.10, 3.11, 3.12, 3.13, 3.14."
          exit 1
        fi

        # Check the deprecated 'permanent_dependencies_branch' input.
        if [ -z "${{ inputs.target_branch }}" ] && [ -z "${{ inputs.permanent_dependencies_branch }}" ]; then
          # Scenario expected to be: One has not explicitly set 'permanent_dependencies_branch' previously, using the (old) default value.
          # While not knowing that it is now deprecated, and one should instead use 'target_branch' with an explicitly set value.
          # Cause of action: Set 'target_branch' to the (old) default value, and emit a deprecation warning.

          echo "::warning file=${{ github.workflow_ref }},title=Deprecation Warning::'permanent_dependencies_branch' is deprecated and will be removed in v2.6.0. Use 'target_branch' instead with explicit value. The old default value for 'permanent_dependencies_branch' was: 'ci/dependency-updates'."
          TARGET_BRANCH=ci/dependency-updates
          echo "target_branch=$TARGET_BRANCH" >> $GITHUB_OUTPUT
        elif [ -z "${{ inputs.target_branch }}" ] && [ -n "${{ inputs.permanent_dependencies_branch }}" ]; then
          # Scenario expected to be: One has set an explicit value for 'permanent_dependencies_branch' previously.
          # While not knowing that it is now deprecated, and one should instead use 'target_branch' with an explicitly set value.
          # Cause of action: Set 'target_branch' to the value of 'permanent_dependencies_branch', and emit a deprecation warning.

          echo "::warning file=${{ github.workflow_ref }},title=Deprecation Warning::'permanent_dependencies_branch' is deprecated and will be removed in v2.6.0. Use 'target_branch' instead."
          echo "target_branch=${{ inputs.permanent_dependencies_branch }}" >> $GITHUB_OUTPUT
        elif [ -n "${{ inputs.target_branch }}" ] && [ -n "${{ inputs.permanent_dependencies_branch }}" ]; then
          # Scenario expected to be: One has set an explicit value for both 'target_branch' and forgotten to remove the explicit value set for 'permanent_dependencies_branch'.
          # Cause of action: Emit a warning and use value for 'target_branch'.

          echo "::warning file=${{ github.workflow_ref }},title=Deprecation Warning::'permanent_dependencies_branch' is deprecated and will be removed in v2.6.0. Use only 'target_branch' instead."
          echo "target_branch=${{ inputs.target_branch }}" >> $GITHUB_OUTPUT
        elif [ -n "${{ inputs.target_branch }}" ] && [ -z "${{ inputs.permanent_dependencies_branch }}" ]; then
          # Scenario expected to be: One has set an explicit value for 'target_branch' and is currently not using 'permanent_dependencies_branch'.
          # Cause of action: Use value for 'target_branch'.

          echo "target_branch=${{ inputs.target_branch }}" >> $GITHUB_OUTPUT
        fi

    - name: Checkout ${{ steps.validate_inputs.outputs.target_branch }} in ${{ github.repository }}
      uses: actions/checkout@v4
      with:
        ref: ${{ steps.validate_inputs.outputs.target_branch }}
        fetch-depth: 0

    - name: Set up Python ${{ inputs.python_version }}
      uses: actions/setup-python@v5
      with:
        python-version: "${{ inputs.python_version }}"
        allow-prereleases: true

    - name: Install system dependencies
      if: inputs.system_dependencies != ''
      run: |
        if [[ "${{ inputs.system_dependencies }}" =~ \n ]]; then
          # Expected to be a multi-line string
          SYSTEM_PACKAGES=()
          while IFS= read -r line; do
            if [ -n "${line}" ]; then SYSTEM_PACKAGES+=("${line}"); fi
          done <<< "${{ inputs.system_dependencies }}"
        else
          # Expected to be a single-line string
          SYSTEM_PACKAGES=(${{ inputs.system_dependencies }})
        fi

        sudo apt update && sudo apt install -y "${SYSTEM_PACKAGES[@]}"

    - name: Install Python dependencies
      run: |
        if [ "${{ inputs.debug }}" == "true" ]; then
          set -x
          VERBOSE=-vvv
        else
          VERBOSE=
        fi

        python -m pip install -U ${VERBOSE} pip
        pip install -U ${VERBOSE} setuptools wheel
        pip install ${VERBOSE} .${{ inputs.install_extras }}
        pip install ${VERBOSE} git+https://github.com/SINTEF/ci-cd.git@v2.9.2
      env:
        PIP_INDEX_URL: ${{ inputs.pip_index_url }}
        PIP_EXTRA_INDEX_URL: ${{ inputs.pip_extra_index_urls }}

    - name: Set up git user
      run: |
        if [ "${{ inputs.debug }}" == "true" ]; then
          set -x
        fi

        git config --global user.name "${{ inputs.git_username }}"
        git config --global user.email "${{ inputs.git_email }}"

    - name: Run ci-cd task
      id: ci_cd
      run: |
        if [ "${{ inputs.debug }}" == "true" ]; then
          set -x
          VERBOSE=--verbose
        else
          VERBOSE=
        fi

        if [ "${{ inputs.fail_fast }}" == "true" ]; then
          FAIL_FAST=--fail-fast
        else
          FAIL_FAST=
        fi

        if [ "${{ inputs.skip_unnormalized_python_package_names }}" == "true" ]; then
          SKIP_UNNORMALIZED_PYTHON_PACKAGE_NAMES=--skip-unnormalized-python-package-names
        else
          SKIP_UNNORMALIZED_PYTHON_PACKAGE_NAMES=
        fi

        IGNORE_OPTIONS=()
        while IFS= read -r line; do
          if [ -n "${line}" ]; then IGNORE_OPTIONS+=(--ignore="${line}"); fi
        done <<< "${{ inputs.ignore }}"

        ci-cd update-deps \
          ${FAIL_FAST} \
          ${VERBOSE} \
          ${SKIP_UNNORMALIZED_PYTHON_PACKAGE_NAMES} \
          --root-repo-path="${PWD}" \
          --ignore-separator="..." \
          "${IGNORE_OPTIONS[@]}"

        if [ "${{ inputs.debug }}" == "true" ]; then
          git status
        fi

        if [ -n "$(git status --porcelain pyproject.toml)" ]; then
          UPDATE_DEPENDENCIES=true
          echo "update_dependencies=$UPDATE_DEPENDENCIES" >> $GITHUB_OUTPUT
          git add pyproject.toml
          git commit -m "Update dependencies in \`pyproject.toml\`"
        else
          UPDATE_DEPENDENCIES=false
          echo "update_dependencies=$UPDATE_DEPENDENCIES" >> $GITHUB_OUTPUT
        fi

    - name: Set PR body
      id: pr_body_config
      if: steps.ci_cd.outputs.update_dependencies == 'true'
      run: |
        if [ "${{ inputs.debug }}" == "true" ]; then
          set -x
        fi

        if [ -z "${{ inputs.pr_body_file }}" ] || [ ! -f "${{ inputs.pr_body_file }}" ]; then
          PR_BODY_FILE=.tmp_pr-body_${{ github.run_id }}_${{ github.run_number }}_${{ github.run_attempt }}.txt
          echo "pr_body_file=${PR_BODY_FILE}" >> $GITHUB_OUTPUT

          echo -e "### Update dependencies (\`pyproject.toml\`)\n\nAutomatically created PR based on the ['CI - Check pyproject.toml dependencies' workflow](https://SINTEF.github.io/ci-cd/latest/workflows/ci_check_pyproject_dependencies/) in [SINTEF/ci-cd](https://github.com/SINTEF/ci-cd)." > ${PR_BODY_FILE}
          echo "Using default PR body."
          REMOVE_PR_BODY_FILE=true
          echo "remove_pr_body_file=$REMOVE_PR_BODY_FILE" >> $GITHUB_OUTPUT
        else
          echo "Using found PR body text file at ${{ inputs.pr_body_file }}."
          echo "pr_body_file=${{ inputs.pr_body_file }}" >> $GITHUB_OUTPUT
          REMOVE_PR_BODY_FILE=false
          echo "remove_pr_body_file=$REMOVE_PR_BODY_FILE" >> $GITHUB_OUTPUT
        fi

    - name: Fetch PR body
      if: steps.ci_cd.outputs.update_dependencies == 'true'
      id: pr_body
      uses: chuhlomin/render-template@v1.10
      with:
        template: ${{ steps.pr_body_config.outputs.pr_body_file }}

    - name: Remove temporary file
      if: steps.pr_body_config.outputs.remove_pr_body_file == 'true'
      run: rm -f ${{ steps.pr_body_config.outputs.pr_body_file }}

    - name: Create PR
      if: steps.ci_cd.outputs.update_dependencies == 'true'
      id: cpr
      uses: peter-evans/create-pull-request@v7
      with:
        token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}
        committer: "${{ inputs.git_username }} <${{ inputs.git_email }}>"
        author: "${{ inputs.git_username }} <${{ inputs.git_email }}>"
        branch: ci/update-pyproject${{ inputs.branch_name_extension && format('/{0}', inputs.branch_name_extension) || '' }}
        delete-branch: true
        title: "[Auto-generated] Check & update dependencies (`pyproject.toml`)"
        body: ${{ steps.pr_body.outputs.result }}
        labels: "${{ inputs.pr_labels }}"

    - name: Information
      run: 'echo "${{ steps.cpr.outputs.pull-request-operation }} PR #${{ steps.cpr.outputs.pull-request-number }}: ${{ steps.cpr.outputs.pull-request-url }}"'
